#include <iostream>
using namespace std;


void func1(int tmpvalue);

int p = 1, q = 5; // 全局变量
int f1(int a)
{
    int b, c; 
    p = 800;  // 改变全局变量的值
    return 1;
}

char d1, d2; // 全局变量
char f2(int x, int y)
{
    int i, j;
    return 0;
}

void lookvalue2()
{
    extern int c1, c2; // 只在该函数内有效
    c1 = 51; // 改变全局变量的值
    c2 = 82; // 改变全局变量的值
    return;
}

extern int c1, c2; //外部变量说明（不分配内存），表示某一个地方定义了c1，c2这两个全局变量。
void lookvalue()
{
    c1 = 5; // 改变全局变量的值
    c2 = 8; // 改变全局变量的值
    return;
}

int c1 = 1, c2 = 2; //全局变量定义（分配内存）

int a11 = 10, b11 = 20;
void lookvalue3(int a11, int b11)
{
    //在局部变量a11，b11的作用范围内，全局变量的a11，b11不起作用
    a11 = 100;
    b11 = 100;
    return;
}


int main()
{
    //c语言入门教程-视频-21
    cout << "021_函数_局部变量和全局变量" << endl;
    cout << "-------------------------------------------------------" << endl;
    /*
        一、局部变量
            1. 在一个函数内部定义的变量叫局部变量，它只在本函数范围内有效。只有在本函数内才能使用，本函数外部是不能使用的。
            2. 不同函数中的形参可以使用相同的变量名，互不干扰。
            3. 形参也是局部变量(例如func1 中的 tmpvalue)，它也只在func1函数里有效。
            4. 有一种特殊写法，虽然不一定这么写，但是一旦遇到这种写法，要认识，要能读懂。
    */
    cout << "一、局部变量" << endl;
    int k = 4;
    func1(k);
    cout << "-------" << endl;

    cout << "4." << endl;
    int a = 1, b = 2;
    //用大括号写一段代码：大括号括起来的这个叫复合语句，在该复合语句中定义变量，这些变量只在该复合语句中有效，这种复合语句也叫程序块。
    {
        int c;  //有效范围只在复合语句内，一旦离开复合语句，变量c的内存就被系统释放掉了。
        c = a + b;
    }
    cout << "-------------------------------------------------------" << endl;

    /*
        二、全局变量
            1. 在函数外定义的变量就称为全局变量（外部变量）
                - 全局变量可以被本文件中其他函数所共用，有效范围从定义变量的位置开始，到本源程序文件结束。如果在整个文件开头定义了变量，则整个文件范围内都可以使用该变量。

            优点：
                - 增加了函数与函数之间的数据联系渠道。如果一个函数中改变了全局变量的值，就能影响到其他函数。相当于在各个函数之间有了直接传递通道，不再需要通过实参和形参传递参数了。
            
            缺点：
                - 只有在必要的时候才使用全局变量（要谨慎使用），因为全局变量在程序运行整个周期之间都占用内存。而局部变量当函数执行结束后就会被系统回收。
                - 降低了函数的通用性，因为函数执行时要依赖这些外部的全局变量。如果函数迁移到其他文件，那么这些相关的外部变量就要一起迁移过去。如果迁移到的另外一个文件中也有同名全局变量，就更麻烦。
                - 东一个全局变量，西一个全局变量，降低代码可读性、可维护性（要限制使用全局变量）。
    */
    cout << "二、全局变量" << endl;
    int m, n;
    f1(12);
    printf("p = %d\n", p);

    /*
        说明：
            1. 如果某个函数想引用在他后面定义的全局变量，则可以用一个关键字 extren 做一个 “外部变量说明”，表示该变量在函数的外部定义，这样函数内就能使用，否在编译就会报错。
               所以，全局变量（外部变量）的定义放在引用他的所有函数之前，就可以避免使用 extren 。
            2. 外部变量定义智能有一次，位置是所有函数之外，定义时会分配内存，定义时可以初始化值。
               而同一个文件中，外部变量说明是可以有多次的（外部变量说明不分配内存），可以在函数外声明，也可以在函数内声明。
               extren 这个声明 仅仅是为了引用（使用）该变量而做的声明。
            3. 在同一个源文件中，如果全局变量和局部变量同名，则在局部变量作用范围内，全局变量不起作用（他的值也不会受到影响）
    */
    cout << "说明1、说明2 " << endl;
    lookvalue();
    printf("c1 = %d\n", c1);
    printf("c2 = %d\n", c2);

    lookvalue2();
    printf("c1 = %d\n", c1);
    printf("c2 = %d\n", c2);
    cout << "-------" << endl;

    cout << "说明3 " << endl;
    {  //复合语句
        int c1, c2;
        c1 = 100;
        c2 = 200;
        printf("局部 c1 = %d\n", c1);
        printf("局部 c2 = %d\n", c2);
    }
    printf("c1 = %d\n", c1);
    printf("c2 = %d\n", c2);
    cout << "-------" << endl;

    a11 = 4;
    b11 = 5;
    printf("a11 = %d\n", a11);
    printf("b11 = %d\n", b11);
    lookvalue3(a11, b11);
    printf("a11 = %d\n", a11);
    printf("b11 = %d\n", b11);
    cout << "-------------------------------------------------------" << endl;
}


void func1(int tmpvalue)
{
    int x, y;
    int m, n;
    m = 5;
    n = 7;

    return;
}